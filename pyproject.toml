[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "doctoralia-scrapper"
version = "1.0.0"
description = "Sistema automatizado para scraping de avaliações e geração de respostas no Doctoralia com notificações via Telegram"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Doctoralia Scrapper Team"}
]
keywords = ["scraping", "doctoralia", "automation", "telegram", "healthcare"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"
dependencies = [
    "attrs>=25.3.0",
    "beautifulsoup4>=4.13.4",
    "certifi>=2025.4.26",
    "charset-normalizer>=3.4.2",
    "h11>=0.16.0",
    "idna>=3.10",
    "lxml>=5.4.0",
    "outcome>=1.3.0.post0",
    "packaging>=25.0",
    "pathspec>=0.12.1",
    "psutil>=7.0.0",
    "PySocks>=1.7.1",
    "python-dotenv>=1.1.0",
    "requests>=2.32.3",
    "schedule>=1.2.2",
    "selenium>=4.33.0",
    "sniffio>=1.3.1",
    "sortedcontainers>=2.4.0",
    "soupsieve>=2.7",
    "trio>=0.27.0",
    "trio-websocket>=0.11.1",
    "typing_extensions>=4.12.2",
    "urllib3>=2.3.0",
    "websocket-client>=1.8.0",
    "wsproto>=1.2.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "black>=23.7.0",
    "isort>=5.12.0",
    "mypy>=1.16.0",
    "flake8>=6.0.0",
    "pylint>=2.17.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pre-commit>=3.3.0"
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1"
]

[project.urls]
Homepage = "https://github.com/bernardopg/doctoralia-scrapper"
Repository = "https://github.com/bernardopg/doctoralia-scrapper"
Issues = "https://github.com/bernardopg/doctoralia-scrapper/issues"

[project.scripts]
doctoralia-scrapper = "main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "config*", "scripts*"]
exclude = ["tests*"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "config", "scripts"]
known_third_party = ["pytest", "selenium", "bs4", "requests"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "selenium.*",
    "bs4.*",
    "requests.*",
    "schedule.*",
    "psutil.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "network: Tests that require network access"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/migrations/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]
