#!/usr/bin/env python3
"""
Script para debug espec√≠fico da se√ß√£o de reviews
"""

import time

from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager


def debug_reviews_section():
    """Debug espec√≠fico da se√ß√£o de reviews"""

    # Configurar Chrome
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument(
        "--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
    )

    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)

    try:
        url = "https://www.doctoralia.com.br/bruna-pinto-gomes/ginecologista/belo-horizonte"
        print(f"üåê Acessando: {url}")

        driver.get(url)
        time.sleep(5)  # Aguardar carregamento

        # Obter HTML da p√°gina
        html = driver.page_source
        soup = BeautifulSoup(html, "html.parser")

        # Focar na se√ß√£o de reviews
        print("\nüîç Procurando se√ß√£o de reviews...")
        reviews_section = soup.find("section", id="profile-reviews")

        if reviews_section:
            print("‚úÖ Se√ß√£o 'profile-reviews' encontrada!")

            # Examinar os filhos da se√ß√£o
            children = reviews_section.find_all(recursive=False)
            print(f"üì¶ Encontrados {len(children)} elementos filhos na se√ß√£o")

            for i, child in enumerate(children[:5]):
                print(f"\n  üë∂ Filho {i + 1}: {child.name}")
                print(f"     üè∑Ô∏è Classes: {child.get('class', [])}")
                print(f"     üîó ID: {child.get('id')}")

                # Verificar se cont√©m reviews
                nested_elements = child.find_all(["div", "article", "li"], limit=10)
                potential_reviews = []

                for elem in nested_elements:
                    text = elem.get_text().strip()
                    classes = elem.get("class", [])

                    # Verificar padr√µes t√≠picos de review
                    review_indicators = [
                        "recomendo",
                        "recomend",
                        "profissional",
                        "m√©dica",
                        "m√©dico",
                        "atendimento",
                        "consulta",
                        "tratamento",
                        "paciente",
                        "excelente",
                    ]

                    if (
                        any(
                            indicator in text.lower() for indicator in review_indicators
                        )
                        and len(text) > 50
                    ):
                        potential_reviews.append(
                            {
                                "element": elem.name,
                                "classes": classes,
                                "text_preview": (
                                    text[:100] + "..." if len(text) > 100 else text
                                ),
                            }
                        )

                if potential_reviews:
                    print(
                        f"     üí¨ Poss√≠veis reviews encontradas: {len(potential_reviews)}"
                    )
                    for j, review in enumerate(potential_reviews[:2]):
                        print(
                            f"       {j + 1}. {review['element']} classes={review['classes']}"
                        )
                        print(f"          üìù \"{review['text_preview']}\"")

            # Procurar por padr√µes espec√≠ficos de review dentro da se√ß√£o
            print("\nüîé Procurando padr√µes espec√≠ficos de review...")

            # Tentar seletores mais espec√≠ficos
            specific_selectors = [
                'div[class*="opinion"]',
                'div[class*="review"]',
                'div[class*="comment"]',
                'li[class*="opinion"]',
                'li[class*="review"]',
                ".card .card-body",
                '[data-cy*="opinion"]',
                '[data-cy*="review"]',
                "div[data-id]",
                ".row .col",
            ]

            for selector in specific_selectors:
                elements = reviews_section.select(selector)
                if elements:
                    print(f"  ‚úÖ {selector}: {len(elements)} elementos")

                    # Examinar os primeiros elementos
                    for k, elem in enumerate(elements[:3]):
                        text = elem.get_text().strip()[:150]
                        if len(text) > 30:  # S√≥ mostrar elementos com texto substancial
                            print(f"    {k + 1}. Classes: {elem.get('class', [])}")
                            print(f'       üìù "{text}..."')
                            break
                else:
                    print(f"  ‚ùå {selector}: 0 elementos")

        else:
            print("‚ùå Se√ß√£o 'profile-reviews' n√£o encontrada!")

            # Procurar outras se√ß√µes relacionadas a reviews
            print("\nüîç Procurando outras se√ß√µes de review...")
            all_sections = soup.find_all("section")
            for section in all_sections:
                section_id = section.get("id", "")
                section_classes = section.get("class", [])
                if any(
                    keyword
                    in str(section_id).lower() + " ".join(section_classes).lower()
                    for keyword in ["review", "opinion", "comment", "feedback"]
                ):
                    print(
                        f"  üìã Se√ß√£o encontrada: id='{section_id}' classes={section_classes}"
                    )

    finally:
        driver.quit()


if __name__ == "__main__":
    debug_reviews_section()
