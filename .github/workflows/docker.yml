name: Docker Build & Push

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        target: [api, worker]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.target }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: ${{ matrix.target }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Generate SBOM
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.target }}:latest
          format: spdx-json
          output-file: sbom-${{ matrix.target }}.spdx.json

      - name: Upload SBOM
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.target }}
          path: sbom-${{ matrix.target }}.spdx.json

  scan-vulnerabilities:
    name: Scan for Vulnerabilities
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      security-events: write
    strategy:
      matrix:
        target: [api, worker]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.target }}:latest
          format: 'sarif'
          output: 'trivy-results-${{ matrix.target }}.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.target }}.sarif'
          category: 'trivy-${{ matrix.target }}'

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create .env file
        run: |
          cat > .env << EOF
          API_KEY=test-integration-key
          WEBHOOK_SIGNING_SECRET=test-webhook-secret
          REDIS_URL=redis://redis:6379/0
          SELENIUM_REMOTE_URL=http://selenium:4444/wd/hub
          EOF

      - name: Pull latest images
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:latest
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/worker:latest

      - name: Update docker-compose with new images
        run: |
          sed -i "s|build:|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:latest #|g" docker-compose.yml
          sed -i "s|context: .|# context: .|g" docker-compose.yml

      - name: Start services
        run: |
          docker compose up -d api worker redis
          sleep 15

      - name: Check API health
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:8000/v1/health 2>/dev/null; then
              echo "API is healthy"
              exit 0
            fi
            echo "Waiting for API... (attempt $i/30)"
            sleep 2
          done
          echo "API health check failed"
          docker compose logs api
          exit 1

      - name: Run basic integration tests
        run: |
          echo "Testing health endpoint..."
          curl -f http://localhost:8000/v1/health

          echo "Testing API with authentication..."
          curl -X POST http://localhost:8000/v1/scrape:run \
            -H "X-API-Key: test-integration-key" \
            -H "Content-Type: application/json" \
            -d '{"doctor_url": "https://www.doctoralia.com.br/medico/test"}' \
            --fail-with-body || echo "Expected to fail without real URL"

      - name: Show logs on failure
        if: failure()
        run: |
          docker compose logs

      - name: Stop services
        if: always()
        run: docker compose down -v
