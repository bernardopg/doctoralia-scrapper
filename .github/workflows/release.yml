name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          PREV_TAG=$(git describe --tags --abbrev=0 ${VERSION}^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            CHANGES=$(git log --pretty=format:"* %s (%h)" --no-merges)
          else
            CHANGES=$(git log ${PREV_TAG}..${VERSION} --pretty=format:"* %s (%h)" --no-merges)
          fi

          cat > CHANGELOG.txt << EOF
          # Changelog

          ## ${VERSION}

          ${CHANGES}

          ## Docker Images

          \`\`\`bash
          docker pull ghcr.io/${{ github.repository }}/api:${VERSION}
          docker pull ghcr.io/${{ github.repository }}/worker:${VERSION}
          \`\`\`

          ## Installation

          \`\`\`bash
          pip install doctoralia-scrapper==${VERSION#v}
          \`\`\`
          EOF

          echo "Generated changelog for ${VERSION}"

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body_path: CHANGELOG.txt
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}
          generate_release_notes: true

  build-and-publish:
    name: Build and Publish Package
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          VERSION_NUM="${VERSION#v}"
          poetry version ${VERSION_NUM}

      - name: Build package
        run: poetry build

      - name: Publish to PyPI
        if: ${{ !contains(needs.create-release.outputs.version, '-') }}
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: poetry publish --skip-existing
        continue-on-error: true

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: |
            dist/*.whl
            dist/*.tar.gz

  build-docker:
    name: Build Release Docker Images
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        target: [api, worker]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.target }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.create-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.create-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.create-release.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: ${{ matrix.target }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [create-release, build-and-publish, build-docker]
    if: always()

    steps:
      - name: Check job status
        id: check
        run: |
          if [[ "${{ needs.build-and-publish.result }}" == "success" ]] && \
             [[ "${{ needs.build-docker.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Version: ${{ needs.create-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.check.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Images" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "ghcr.io/${{ github.repository }}/api:${{ needs.create-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "ghcr.io/${{ github.repository }}/worker:${{ needs.create-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
