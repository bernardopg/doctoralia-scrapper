name: n8n Integration CI/CD

on:
  push:
    branches: [main, feat/n8n-integration]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 bandit mypy
      
      - name: Run Black
        run: black --check src/ tests/
      
      - name: Run isort
        run: isort --check-only src/ tests/
      
      - name: Run Flake8
        run: flake8 src/ tests/ --max-line-length=100
      
      - name: Run Bandit Security Check
        run: bandit -r src/ -ll
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx
      
      - name: Run unit tests
        env:
          REDIS_URL: redis://localhost:6379/0
          API_KEY: test-api-key
          WEBHOOK_SIGNING_SECRET: test-secret
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest tests/n8n/ -v --cov=src/api --cov=src/integrations --cov=src/jobs --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build API image
        uses: docker/build-push-action@v4
        with:
          context: .
          target: api
          tags: |
            ghcr.io/${{ github.repository }}/api:latest
            ghcr.io/${{ github.repository }}/api:${{ github.sha }}
          push: ${{ github.event_name != 'pull_request' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build Worker image
        uses: docker/build-push-action@v4
        with:
          context: .
          target: worker
          tags: |
            ghcr.io/${{ github.repository }}/worker:latest
            ghcr.io/${{ github.repository }}/worker:${{ github.sha }}
          push: ${{ github.event_name != 'pull_request' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v3
      
      - name: Create .env file
        run: |
          cat > .env << EOF
          API_KEY=test-integration-key
          WEBHOOK_SIGNING_SECRET=test-webhook-secret
          REDIS_URL=redis://redis:6379/0
          SELENIUM_REMOTE_URL=http://selenium:4444/wd/hub
          EOF
      
      - name: Start services
        run: |
          docker-compose up -d api worker redis selenium
          sleep 10
      
      - name: Check API health
        run: |
          curl -f http://localhost:8000/v1/health || exit 1
      
      - name: Run integration tests
        run: |
          # Test sync endpoint
          curl -X POST http://localhost:8000/v1/scrape:run \
            -H "X-API-Key: test-integration-key" \
            -H "Content-Type: application/json" \
            -d '{"doctor_url": "https://www.doctoralia.com.br/medico/test"}' \
            --fail-with-body || true
          
          # Test async job creation
          JOB_ID=$(curl -X POST http://localhost:8000/v1/jobs \
            -H "X-API-Key: test-integration-key" \
            -H "Content-Type: application/json" \
            -d '{"doctor_url": "https://www.doctoralia.com.br/medico/test", "mode": "async"}' \
            | jq -r '.job_id')
          
          echo "Created job: $JOB_ID"
      
      - name: Stop services
        if: always()
        run: docker-compose down

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, test, build-docker, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy notification
        run: |
          echo "Ready to deploy to production!"
          echo "Images available at:"
          echo "  - ghcr.io/${{ github.repository }}/api:${{ github.sha }}"
          echo "  - ghcr.io/${{ github.repository }}/worker:${{ github.sha }}"
