{
  "name": "Doctoralia Async with Webhook",
  "nodes": [
    {
      "parameters": {
        "path": "doctoralia-results",
        "responseMode": "responseNode",
        "responseNode": "Webhook Response"
      },
      "id": "webhook-1234",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "abc123-webhook-id"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\"status\": \"accepted\", \"job_id\": \"{{$json.job_id}}\"}"
      },
      "id": "response-5678",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [650, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://api:8000/v1/jobs",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-Key",
              "value": "={{$credentials.apiKey}}"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={\n  \"doctor_url\": \"{{$json.body.doctor_url}}\",\n  \"include_analysis\": true,\n  \"include_generation\": true,\n  \"callback_url\": \"{{$webhookUrl}}/webhook/doctoralia-callback\",\n  \"mode\": \"async\",\n  \"language\": \"pt\"\n}"
      },
      "id": "create-job-9012",
      "name": "Create Async Job",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [450, 300]
    },
    {
      "parameters": {
        "path": "doctoralia-callback",
        "responseMode": "onReceived"
      },
      "id": "callback-3456",
      "name": "Callback Receiver",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 500],
      "webhookId": "def456-callback-id"
    },
    {
      "parameters": {
        "functionCode": "// Verify webhook signature (optional)\nconst crypto = require('crypto');\n\nconst secret = process.env.WEBHOOK_SIGNING_SECRET || '';\nif (secret) {\n  const timestamp = $headers['x-timestamp'];\n  const signature = $headers['x-signature'];\n  \n  if (timestamp && signature) {\n    const body = JSON.stringify($input.all()[0].json);\n    const message = `${timestamp}.${body}`;\n    const expectedSig = 'sha256=' + crypto\n      .createHmac('sha256', secret)\n      .update(message)\n      .digest('hex');\n    \n    if (signature !== expectedSig) {\n      throw new Error('Invalid webhook signature');\n    }\n  }\n}\n\nreturn items;"
      },
      "id": "verify-7890",
      "name": "Verify Signature",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [450, 500]
    },
    {
      "parameters": {
        "functionCode": "// Process callback results\nconst result = items[0].json;\n\nif (result.status === 'completed') {\n  const summary = {\n    doctor: result.doctor.name,\n    rating: result.doctor.rating,\n    reviews_count: result.reviews.length,\n    sentiment: result.analysis?.sentiments?.compound || 0,\n    quality_score: result.analysis?.quality_score || 0,\n    generated_responses: result.generation?.responses?.length || 0\n  };\n  \n  // Extract top reviews\n  const topReviews = result.reviews\n    .slice(0, 3)\n    .map(r => ({\n      rating: r.rating,\n      text: r.text.substring(0, 100) + '...',\n      date: r.date\n    }));\n  \n  return [{\n    json: {\n      summary,\n      topReviews,\n      fullResult: result\n    }\n  }];\n} else {\n  throw new Error(`Job failed: ${result.status}`);\n}"
      },
      "id": "process-abcd",
      "name": "Process Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [650, 500]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "report",
              "value": "=üìä **An√°lise Completa - {{$json.summary.doctor}}**\n\n‚≠ê Avalia√ß√£o: {{$json.summary.rating}}/5\nüìù Total de Avalia√ß√µes: {{$json.summary.reviews_count}}\nüòä Sentimento Geral: {{$json.summary.sentiment}}\n‚úÖ Score de Qualidade: {{$json.summary.quality_score}}\nüí¨ Respostas Geradas: {{$json.summary.generated_responses}}"
            }
          ]
        }
      },
      "id": "format-efgh",
      "name": "Format Report",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [850, 500]
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "sendMessage",
        "chatId": "={{$credentials.telegramChatId}}",
        "text": "={{$json.report}}",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "telegram-ijkl",
      "name": "Send Report",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1050, 500]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Create Async Job",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Async Job": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Callback Receiver": {
      "main": [
        [
          {
            "node": "Verify Signature",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify Signature": {
      "main": [
        [
          {
            "node": "Process Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Results": {
      "main": [
        [
          {
            "node": "Format Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Report": {
      "main": [
        [
          {
            "node": "Send Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateId": "doctoralia-async-webhook"
  },
  "tags": ["async", "webhook", "callback"]
}
